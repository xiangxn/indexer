// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v3.19.2
// source: donut.proto

package donut

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *SearchRequest) Reset() {
	*x = SearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_donut_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest) ProtoMessage() {}

func (x *SearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_donut_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest.ProtoReflect.Descriptor instead.
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return file_donut_proto_rawDescGZIP(), []int{0}
}

func (x *SearchRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type BaseReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string     `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *anypb.Any `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *BaseReply) Reset() {
	*x = BaseReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_donut_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseReply) ProtoMessage() {}

func (x *BaseReply) ProtoReflect() protoreflect.Message {
	mi := &file_donut_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseReply.ProtoReflect.Descriptor instead.
func (*BaseReply) Descriptor() ([]byte, []int) {
	return file_donut_proto_rawDescGZIP(), []int{1}
}

func (x *BaseReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *BaseReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *BaseReply) GetData() *anypb.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	JoinIn         int64     `protobuf:"varint,2,opt,name=joinIn,proto3" json:"joinIn,omitempty"`
	Index          int64     `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	HoldersCount   int64     `protobuf:"varint,4,opt,name=holdersCount,proto3" json:"holdersCount,omitempty"`
	HoldingsCount  int64     `protobuf:"varint,5,opt,name=holdingsCount,proto3" json:"holdingsCount,omitempty"`
	ShareSupply    string    `protobuf:"bytes,6,opt,name=shareSupply,proto3" json:"shareSupply,omitempty"`
	Holdings       []*Holder `protobuf:"bytes,7,rep,name=holdings,proto3" json:"holdings,omitempty"`
	Holders        []*Holder `protobuf:"bytes,8,rep,name=holders,proto3" json:"holders,omitempty"`
	FeeAmount      string    `protobuf:"bytes,9,opt,name=feeAmount,proto3" json:"feeAmount,omitempty"`
	CaptureCount   int64     `protobuf:"varint,10,opt,name=captureCount,proto3" json:"captureCount,omitempty"`
	TotalCaptured  string    `protobuf:"bytes,11,opt,name=totalCaptured,proto3" json:"totalCaptured,omitempty"`
	DonateCount    int64     `protobuf:"varint,12,opt,name=donateCount,proto3" json:"donateCount,omitempty"`
	TotalDonated   string    `protobuf:"bytes,13,opt,name=totalDonated,proto3" json:"totalDonated,omitempty"`
	ReceivedDonate string    `protobuf:"bytes,14,opt,name=receivedDonate,proto3" json:"receivedDonate,omitempty"`
	InscriptionFee string    `protobuf:"bytes,15,opt,name=inscriptionFee,proto3" json:"inscriptionFee,omitempty"`
}

func (x *Account) Reset() {
	*x = Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_donut_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_donut_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_donut_proto_rawDescGZIP(), []int{2}
}

func (x *Account) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Account) GetJoinIn() int64 {
	if x != nil {
		return x.JoinIn
	}
	return 0
}

func (x *Account) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Account) GetHoldersCount() int64 {
	if x != nil {
		return x.HoldersCount
	}
	return 0
}

func (x *Account) GetHoldingsCount() int64 {
	if x != nil {
		return x.HoldingsCount
	}
	return 0
}

func (x *Account) GetShareSupply() string {
	if x != nil {
		return x.ShareSupply
	}
	return ""
}

func (x *Account) GetHoldings() []*Holder {
	if x != nil {
		return x.Holdings
	}
	return nil
}

func (x *Account) GetHolders() []*Holder {
	if x != nil {
		return x.Holders
	}
	return nil
}

func (x *Account) GetFeeAmount() string {
	if x != nil {
		return x.FeeAmount
	}
	return ""
}

func (x *Account) GetCaptureCount() int64 {
	if x != nil {
		return x.CaptureCount
	}
	return 0
}

func (x *Account) GetTotalCaptured() string {
	if x != nil {
		return x.TotalCaptured
	}
	return ""
}

func (x *Account) GetDonateCount() int64 {
	if x != nil {
		return x.DonateCount
	}
	return 0
}

func (x *Account) GetTotalDonated() string {
	if x != nil {
		return x.TotalDonated
	}
	return ""
}

func (x *Account) GetReceivedDonate() string {
	if x != nil {
		return x.ReceivedDonate
	}
	return ""
}

func (x *Account) GetInscriptionFee() string {
	if x != nil {
		return x.InscriptionFee
	}
	return ""
}

type Donut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UsersCount            int64  `protobuf:"varint,2,opt,name=usersCount,proto3" json:"usersCount,omitempty"`
	TotalProtocolFee      string `protobuf:"bytes,3,opt,name=totalProtocolFee,proto3" json:"totalProtocolFee,omitempty"`
	TotalCreateFee        string `protobuf:"bytes,4,opt,name=totalCreateFee,proto3" json:"totalCreateFee,omitempty"`
	BuyCount              int64  `protobuf:"varint,5,opt,name=buyCount,proto3" json:"buyCount,omitempty"`
	SellCount             int64  `protobuf:"varint,6,opt,name=sellCount,proto3" json:"sellCount,omitempty"`
	TotalValueCapture     string `protobuf:"bytes,7,opt,name=totalValueCapture,proto3" json:"totalValueCapture,omitempty"`
	TotalDonated          string `protobuf:"bytes,8,opt,name=totalDonated,proto3" json:"totalDonated,omitempty"`
	TotalFTCBurned        string `protobuf:"bytes,9,opt,name=totalFTCBurned,proto3" json:"totalFTCBurned,omitempty"`
	TotalInscriptionFee   string `protobuf:"bytes,10,opt,name=totalInscriptionFee,proto3" json:"totalInscriptionFee,omitempty"`
	InscriptionFeePercent int64  `protobuf:"varint,11,opt,name=inscriptionFeePercent,proto3" json:"inscriptionFeePercent,omitempty"`
}

func (x *Donut) Reset() {
	*x = Donut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_donut_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Donut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Donut) ProtoMessage() {}

func (x *Donut) ProtoReflect() protoreflect.Message {
	mi := &file_donut_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Donut.ProtoReflect.Descriptor instead.
func (*Donut) Descriptor() ([]byte, []int) {
	return file_donut_proto_rawDescGZIP(), []int{3}
}

func (x *Donut) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Donut) GetUsersCount() int64 {
	if x != nil {
		return x.UsersCount
	}
	return 0
}

func (x *Donut) GetTotalProtocolFee() string {
	if x != nil {
		return x.TotalProtocolFee
	}
	return ""
}

func (x *Donut) GetTotalCreateFee() string {
	if x != nil {
		return x.TotalCreateFee
	}
	return ""
}

func (x *Donut) GetBuyCount() int64 {
	if x != nil {
		return x.BuyCount
	}
	return 0
}

func (x *Donut) GetSellCount() int64 {
	if x != nil {
		return x.SellCount
	}
	return 0
}

func (x *Donut) GetTotalValueCapture() string {
	if x != nil {
		return x.TotalValueCapture
	}
	return ""
}

func (x *Donut) GetTotalDonated() string {
	if x != nil {
		return x.TotalDonated
	}
	return ""
}

func (x *Donut) GetTotalFTCBurned() string {
	if x != nil {
		return x.TotalFTCBurned
	}
	return ""
}

func (x *Donut) GetTotalInscriptionFee() string {
	if x != nil {
		return x.TotalInscriptionFee
	}
	return ""
}

func (x *Donut) GetInscriptionFeePercent() int64 {
	if x != nil {
		return x.InscriptionFeePercent
	}
	return 0
}

type Holder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreateAt    int64    `protobuf:"varint,2,opt,name=createAt,proto3" json:"createAt,omitempty"`
	Holder      *Account `protobuf:"bytes,3,opt,name=holder,proto3" json:"holder,omitempty"`
	Subject     *Account `protobuf:"bytes,4,opt,name=subject,proto3" json:"subject,omitempty"`
	SharesOwned string   `protobuf:"bytes,5,opt,name=sharesOwned,proto3" json:"sharesOwned,omitempty"`
}

func (x *Holder) Reset() {
	*x = Holder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_donut_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Holder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Holder) ProtoMessage() {}

func (x *Holder) ProtoReflect() protoreflect.Message {
	mi := &file_donut_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Holder.ProtoReflect.Descriptor instead.
func (*Holder) Descriptor() ([]byte, []int) {
	return file_donut_proto_rawDescGZIP(), []int{4}
}

func (x *Holder) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Holder) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *Holder) GetHolder() *Account {
	if x != nil {
		return x.Holder
	}
	return nil
}

func (x *Holder) GetSubject() *Account {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *Holder) GetSharesOwned() string {
	if x != nil {
		return x.SharesOwned
	}
	return ""
}

type ValueCaptured struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Subject  *Account `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	Investor *Account `protobuf:"bytes,3,opt,name=investor,proto3" json:"investor,omitempty"`
	Amount   string   `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Index    int64    `protobuf:"varint,5,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *ValueCaptured) Reset() {
	*x = ValueCaptured{}
	if protoimpl.UnsafeEnabled {
		mi := &file_donut_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueCaptured) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueCaptured) ProtoMessage() {}

func (x *ValueCaptured) ProtoReflect() protoreflect.Message {
	mi := &file_donut_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueCaptured.ProtoReflect.Descriptor instead.
func (*ValueCaptured) Descriptor() ([]byte, []int) {
	return file_donut_proto_rawDescGZIP(), []int{5}
}

func (x *ValueCaptured) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ValueCaptured) GetSubject() *Account {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *ValueCaptured) GetInvestor() *Account {
	if x != nil {
		return x.Investor
	}
	return nil
}

func (x *ValueCaptured) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *ValueCaptured) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

type Trade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Trader            *Account `protobuf:"bytes,2,opt,name=trader,proto3" json:"trader,omitempty"`
	Subject           *Account `protobuf:"bytes,3,opt,name=subject,proto3" json:"subject,omitempty"`
	IsBuy             bool     `protobuf:"varint,4,opt,name=isBuy,proto3" json:"isBuy,omitempty"`
	ShareAmount       string   `protobuf:"bytes,5,opt,name=shareAmount,proto3" json:"shareAmount,omitempty"`
	EthAmount         string   `protobuf:"bytes,6,opt,name=ethAmount,proto3" json:"ethAmount,omitempty"`
	ProtocolEthAmount string   `protobuf:"bytes,7,opt,name=protocolEthAmount,proto3" json:"protocolEthAmount,omitempty"`
	SubjectEthAmount  string   `protobuf:"bytes,8,opt,name=subjectEthAmount,proto3" json:"subjectEthAmount,omitempty"`
	Supply            string   `protobuf:"bytes,9,opt,name=supply,proto3" json:"supply,omitempty"`
	Index             int64    `protobuf:"varint,10,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *Trade) Reset() {
	*x = Trade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_donut_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trade) ProtoMessage() {}

func (x *Trade) ProtoReflect() protoreflect.Message {
	mi := &file_donut_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trade.ProtoReflect.Descriptor instead.
func (*Trade) Descriptor() ([]byte, []int) {
	return file_donut_proto_rawDescGZIP(), []int{6}
}

func (x *Trade) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Trade) GetTrader() *Account {
	if x != nil {
		return x.Trader
	}
	return nil
}

func (x *Trade) GetSubject() *Account {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *Trade) GetIsBuy() bool {
	if x != nil {
		return x.IsBuy
	}
	return false
}

func (x *Trade) GetShareAmount() string {
	if x != nil {
		return x.ShareAmount
	}
	return ""
}

func (x *Trade) GetEthAmount() string {
	if x != nil {
		return x.EthAmount
	}
	return ""
}

func (x *Trade) GetProtocolEthAmount() string {
	if x != nil {
		return x.ProtocolEthAmount
	}
	return ""
}

func (x *Trade) GetSubjectEthAmount() string {
	if x != nil {
		return x.SubjectEthAmount
	}
	return ""
}

func (x *Trade) GetSupply() string {
	if x != nil {
		return x.Supply
	}
	return ""
}

func (x *Trade) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

type Inscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Index       int64    `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Inscription []byte   `protobuf:"bytes,3,opt,name=inscription,proto3" json:"inscription,omitempty"`
	Value       string   `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	Owner       *Account `protobuf:"bytes,5,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (x *Inscription) Reset() {
	*x = Inscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_donut_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Inscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Inscription) ProtoMessage() {}

func (x *Inscription) ProtoReflect() protoreflect.Message {
	mi := &file_donut_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Inscription.ProtoReflect.Descriptor instead.
func (*Inscription) Descriptor() ([]byte, []int) {
	return file_donut_proto_rawDescGZIP(), []int{7}
}

func (x *Inscription) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Inscription) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Inscription) GetInscription() []byte {
	if x != nil {
		return x.Inscription
	}
	return nil
}

func (x *Inscription) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Inscription) GetOwner() *Account {
	if x != nil {
		return x.Owner
	}
	return nil
}

type Src20 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Index       int64  `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Tick        string `protobuf:"bytes,3,opt,name=tick,proto3" json:"tick,omitempty"`
	Max         string `protobuf:"bytes,4,opt,name=max,proto3" json:"max,omitempty"`
	Limit       string `protobuf:"bytes,5,opt,name=limit,proto3" json:"limit,omitempty"`
	Fee         string `protobuf:"bytes,6,opt,name=fee,proto3" json:"fee,omitempty"`
	Supply      string `protobuf:"bytes,7,opt,name=supply,proto3" json:"supply,omitempty"`
	HolderCount int64  `protobuf:"varint,8,opt,name=holderCount,proto3" json:"holderCount,omitempty"`
	IsFinished  bool   `protobuf:"varint,9,opt,name=isFinished,proto3" json:"isFinished,omitempty"`
	CreateAt    int64  `protobuf:"varint,10,opt,name=createAt,proto3" json:"createAt,omitempty"`
}

func (x *Src20) Reset() {
	*x = Src20{}
	if protoimpl.UnsafeEnabled {
		mi := &file_donut_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Src20) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Src20) ProtoMessage() {}

func (x *Src20) ProtoReflect() protoreflect.Message {
	mi := &file_donut_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Src20.ProtoReflect.Descriptor instead.
func (*Src20) Descriptor() ([]byte, []int) {
	return file_donut_proto_rawDescGZIP(), []int{8}
}

func (x *Src20) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Src20) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Src20) GetTick() string {
	if x != nil {
		return x.Tick
	}
	return ""
}

func (x *Src20) GetMax() string {
	if x != nil {
		return x.Max
	}
	return ""
}

func (x *Src20) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *Src20) GetFee() string {
	if x != nil {
		return x.Fee
	}
	return ""
}

func (x *Src20) GetSupply() string {
	if x != nil {
		return x.Supply
	}
	return ""
}

func (x *Src20) GetHolderCount() int64 {
	if x != nil {
		return x.HolderCount
	}
	return 0
}

func (x *Src20) GetIsFinished() bool {
	if x != nil {
		return x.IsFinished
	}
	return false
}

func (x *Src20) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

type Src20Balance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Tick   string `protobuf:"bytes,2,opt,name=tick,proto3" json:"tick,omitempty"`
	Holder string `protobuf:"bytes,3,opt,name=holder,proto3" json:"holder,omitempty"`
	Amount string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *Src20Balance) Reset() {
	*x = Src20Balance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_donut_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Src20Balance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Src20Balance) ProtoMessage() {}

func (x *Src20Balance) ProtoReflect() protoreflect.Message {
	mi := &file_donut_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Src20Balance.ProtoReflect.Descriptor instead.
func (*Src20Balance) Descriptor() ([]byte, []int) {
	return file_donut_proto_rawDescGZIP(), []int{9}
}

func (x *Src20Balance) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Src20Balance) GetTick() string {
	if x != nil {
		return x.Tick
	}
	return ""
}

func (x *Src20Balance) GetHolder() string {
	if x != nil {
		return x.Holder
	}
	return ""
}

func (x *Src20Balance) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type Donate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Subject    *Account `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	Donator    *Account `protobuf:"bytes,3,opt,name=donator,proto3" json:"donator,omitempty"`
	EthAmount  string   `protobuf:"bytes,4,opt,name=ethAmount,proto3" json:"ethAmount,omitempty"`
	RecCShares string   `protobuf:"bytes,5,opt,name=recCShares,proto3" json:"recCShares,omitempty"`
	TweetId    string   `protobuf:"bytes,6,opt,name=tweetId,proto3" json:"tweetId,omitempty"`
	Round      int64    `protobuf:"varint,7,opt,name=round,proto3" json:"round,omitempty"`
	Index      int64    `protobuf:"varint,8,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *Donate) Reset() {
	*x = Donate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_donut_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Donate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Donate) ProtoMessage() {}

func (x *Donate) ProtoReflect() protoreflect.Message {
	mi := &file_donut_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Donate.ProtoReflect.Descriptor instead.
func (*Donate) Descriptor() ([]byte, []int) {
	return file_donut_proto_rawDescGZIP(), []int{10}
}

func (x *Donate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Donate) GetSubject() *Account {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *Donate) GetDonator() *Account {
	if x != nil {
		return x.Donator
	}
	return nil
}

func (x *Donate) GetEthAmount() string {
	if x != nil {
		return x.EthAmount
	}
	return ""
}

func (x *Donate) GetRecCShares() string {
	if x != nil {
		return x.RecCShares
	}
	return ""
}

func (x *Donate) GetTweetId() string {
	if x != nil {
		return x.TweetId
	}
	return ""
}

func (x *Donate) GetRound() int64 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *Donate) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

type Counter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Index int64  `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *Counter) Reset() {
	*x = Counter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_donut_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Counter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Counter) ProtoMessage() {}

func (x *Counter) ProtoReflect() protoreflect.Message {
	mi := &file_donut_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Counter.ProtoReflect.Descriptor instead.
func (*Counter) Descriptor() ([]byte, []int) {
	return file_donut_proto_rawDescGZIP(), []int{11}
}

func (x *Counter) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Counter) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

var File_donut_proto protoreflect.FileDescriptor

var file_donut_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x64, 0x6f, 0x6e, 0x75, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x64,
	0x6f, 0x6e, 0x75, 0x74, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x25, 0x0a,
	0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x22, 0x5b, 0x0a, 0x09, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x85, 0x04, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x6a, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6a,
	0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x0c, 0x68,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x53, 0x75,
	0x70, 0x70, 0x6c, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x29, 0x0a, 0x08, 0x68, 0x6f, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x6f, 0x6e, 0x75,
	0x74, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x08, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x6f, 0x6e, 0x75, 0x74, 0x2e, 0x48, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x52, 0x07, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x66,
	0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x66, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x61, 0x70,
	0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x61, 0x70, 0x74, 0x75,
	0x72, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x6f,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x44, 0x6f, 0x6e, 0x61, 0x74,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x65, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x22, 0xa7, 0x03, 0x0a, 0x05, 0x44, 0x6f,
	0x6e, 0x75, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x46, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x46, 0x65, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x65,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x79, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x75, 0x79, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x6f, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x54, 0x43, 0x42,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x46, 0x54, 0x43, 0x42, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x65, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49,
	0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x34, 0x0a,
	0x15, 0x69, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x69, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x22, 0xa8, 0x01, 0x0a, 0x06, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x68, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6f, 0x6e,
	0x75, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x68, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x12, 0x28, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6f, 0x6e, 0x75, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x22, 0xa3,
	0x01, 0x0a, 0x0d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x28, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6f, 0x6e, 0x75, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2a, 0x0a, 0x08, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64,
	0x6f, 0x6e, 0x75, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x08, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x22, 0xc7, 0x02, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26,
	0x0a, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x64, 0x6f, 0x6e, 0x75, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6f, 0x6e, 0x75, 0x74, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x42, 0x75, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x69, 0x73, 0x42, 0x75, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x74, 0x68, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x74, 0x68,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x45, 0x74, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x45, 0x74, 0x68, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45,
	0x74, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x74, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x91,
	0x01, 0x0a, 0x0b, 0x49, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6f,
	0x6e, 0x75, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x22, 0xf1, 0x01, 0x0a, 0x05, 0x53, 0x72, 0x63, 0x32, 0x30, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x69, 0x63, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x65, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x68,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x22, 0x62, 0x0a, 0x0c, 0x53, 0x72, 0x63, 0x32, 0x30, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x63, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf0, 0x01, 0x0a, 0x06, 0x44,
	0x6f, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6f, 0x6e, 0x75, 0x74, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x28, 0x0a, 0x07, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x64, 0x6f, 0x6e, 0x75, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x07, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x74, 0x68,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x74,
	0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x43, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63,
	0x43, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x77, 0x65, 0x65, 0x74,
	0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x77, 0x65, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x2f, 0x0a,
	0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x32, 0x5a,
	0x0a, 0x08, 0x44, 0x6f, 0x6e, 0x75, 0x74, 0x69, 0x6e, 0x73, 0x12, 0x4e, 0x0a, 0x06, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x12, 0x14, 0x2e, 0x64, 0x6f, 0x6e, 0x75, 0x74, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x64, 0x6f, 0x6e,
	0x75, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1c, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x16, 0x3a, 0x01, 0x2a, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f,
	0x64, 0x6f, 0x6e, 0x75, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_donut_proto_rawDescOnce sync.Once
	file_donut_proto_rawDescData = file_donut_proto_rawDesc
)

func file_donut_proto_rawDescGZIP() []byte {
	file_donut_proto_rawDescOnce.Do(func() {
		file_donut_proto_rawDescData = protoimpl.X.CompressGZIP(file_donut_proto_rawDescData)
	})
	return file_donut_proto_rawDescData
}

var file_donut_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_donut_proto_goTypes = []interface{}{
	(*SearchRequest)(nil), // 0: donut.SearchRequest
	(*BaseReply)(nil),     // 1: donut.BaseReply
	(*Account)(nil),       // 2: donut.Account
	(*Donut)(nil),         // 3: donut.Donut
	(*Holder)(nil),        // 4: donut.Holder
	(*ValueCaptured)(nil), // 5: donut.ValueCaptured
	(*Trade)(nil),         // 6: donut.Trade
	(*Inscription)(nil),   // 7: donut.Inscription
	(*Src20)(nil),         // 8: donut.Src20
	(*Src20Balance)(nil),  // 9: donut.Src20Balance
	(*Donate)(nil),        // 10: donut.Donate
	(*Counter)(nil),       // 11: donut.Counter
	(*anypb.Any)(nil),     // 12: google.protobuf.Any
}
var file_donut_proto_depIdxs = []int32{
	12, // 0: donut.BaseReply.data:type_name -> google.protobuf.Any
	4,  // 1: donut.Account.holdings:type_name -> donut.Holder
	4,  // 2: donut.Account.holders:type_name -> donut.Holder
	2,  // 3: donut.Holder.holder:type_name -> donut.Account
	2,  // 4: donut.Holder.subject:type_name -> donut.Account
	2,  // 5: donut.ValueCaptured.subject:type_name -> donut.Account
	2,  // 6: donut.ValueCaptured.investor:type_name -> donut.Account
	2,  // 7: donut.Trade.trader:type_name -> donut.Account
	2,  // 8: donut.Trade.subject:type_name -> donut.Account
	2,  // 9: donut.Inscription.owner:type_name -> donut.Account
	2,  // 10: donut.Donate.subject:type_name -> donut.Account
	2,  // 11: donut.Donate.donator:type_name -> donut.Account
	0,  // 12: donut.Donutins.Search:input_type -> donut.SearchRequest
	1,  // 13: donut.Donutins.Search:output_type -> donut.BaseReply
	13, // [13:14] is the sub-list for method output_type
	12, // [12:13] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_donut_proto_init() }
func file_donut_proto_init() {
	if File_donut_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_donut_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_donut_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_donut_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_donut_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Donut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_donut_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Holder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_donut_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueCaptured); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_donut_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_donut_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Inscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_donut_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Src20); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_donut_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Src20Balance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_donut_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Donate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_donut_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Counter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_donut_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_donut_proto_goTypes,
		DependencyIndexes: file_donut_proto_depIdxs,
		MessageInfos:      file_donut_proto_msgTypes,
	}.Build()
	File_donut_proto = out.File
	file_donut_proto_rawDesc = nil
	file_donut_proto_goTypes = nil
	file_donut_proto_depIdxs = nil
}
